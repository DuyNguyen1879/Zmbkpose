#!/bin/bash 
#
#!/bin/bash
#
# zmbkpose
#
# Bash script to hot backup and hot restore Zimbra Collaboration Suite Opensource
#
# Copyright (C) 2007 Rubens Alonso Filho <rubens@harv.com.br>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public
# License as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
# 26/10/2010 - Version 1.0.5 - By Alan Nikitiuk Milani
#					       <alan.milani@4linux.com.br>
#					       <niki.milani@gmail.com>
#                          Bruno Gurgel
#						   <bruno@4linux.com.br>
#					       <bruno.gurgel@gmail.com>
#
#


exibe_help ()
{
echo "Usos: 
     zmbkpose -f 	
			Executa o backup full de todas as contas.
     zmbkpose -f mail1,mail2,...,mailn
			Executa o backup full das contas especificadas na linha de comandos.
     zmbkpose -i 	
			Executa o backup incremental de todas as contas.
			Precisa de pelo menos um backup full completo.
     zmbkpose -i mail1,mail2,...,mailn	
			Executa o backup incremental das contas especificadas na linha de comandos.
			Se a conta especificada não tiver um full aterior, será feito nesta mesma sessão.
     zmbkpose -l
			Lista as sessões de backup já realizadas.
     zmbkpose -r mail1,mail2,...,mailn nome_da_sessao	
			Restaura o conteúdo das contas especificadas na linha de comando.
			Se o nome da sessão não for especificado, será feita a restauração completa: Todas os backups encontrados, do mais antigo ao mais recente.
     zmbkpose -restoreAccount mail1,mail2,...,mailn
			Restaura contas apagadas a partir do backup mais antigo encontrado até o mais novo.
     zmbkpose -restoreAccount mail1,mail2,...,mailn --LDAPOnly nome_da_sessao
			Restaura apenas o perfil do usuário, incluindo senha utilizada.
			DICA: Pode ser necessário atualizar o cache do servidor para imediata aplicação dos atributos restaurados.
			      zmprov fc account nome_da_conta
     zmbkpose -d n
			Onde \"n\" é um número.
			Exclui todos os backups anteriores a quantidade de dias especificada na linha de comandos.
     zmbkpose -d n weeks
			Onde \"n\" é um número.
			Exclui todos os backups anteriores a quantidade de semanas especificada na linha de comandos.
     zmbkpose -d n months
			Onde \"n\" é um número.
			Exclui todos os backups anteriores a quantidade de meses especificada na linha de comandos.

"
# Deixar uma opção de "Disaster Recovery" oculta + confirmações
exit 0
}

backup_todas_contas_parallel()
{
COUNT=0
LISTATODASCONTAS=$(mktemp)
$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(objectclass=zimbraAccount)" zimbraMailDeliveryAddress zimbraMailHost | grep ^zimbraMail | awk '{print $2}' > "$LISTATODASCONTAS"
SESSAO="full-"$(date  +%Y%m%d%H%M%S)
echo "SESSAO: $SESSAO iniciada em $(date)" >> $WORKDIR/sessions.txt
TEMPDIR=$(mktemp -d $WORKDIR/XXXX)
for MAIL in $(grep @ $LISTATODASCONTAS); do 
	
	# Contador de processos curl simultaneos
	STAT=$(ps aux | grep -i curl | grep -v grep| wc -l)
	
	if [ $STAT -lt $MAX_PARALLEL_PROCESS ];then	
		MAILHOST=$(grep -A1 ^$MAIL $LISTATODASCONTAS| grep -v @)
		$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(zimbraMailDeliveryAddress=$MAIL)" > $TEMPDIR/$MAIL.ldiff
		$(which curl) -k -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz > $TEMPDIR/$MAIL.tgz &
		echo $SESSAO:$MAIL:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt
		let COUNT++
        else
		until [ $STAT -lt $MAX_PARALLEL_PROCESS ]
                do
                        STAT=$(ps aux | grep -i curl | grep -v grep| wc -l)
			sleep 5
                        #echo "Número máximo de processos atingido ($STAT). Aguardando vaga."
                done
		# Bloco de execução
		MAILHOST=$(grep -A1 ^$MAIL $LISTATODASCONTAS| grep -v @)
                $(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(zimbraMailDeliveryAddress=$MAIL)" > $TEMPDIR/$MAIL.ldiff
                $(which curl) -k -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz > $TEMPDIR/$MAIL.tgz &
                echo $SESSAO:$MAIL:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt
		let COUNT++
		# Fim Bloco de execução               
                
	fi



done
mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
echo "SESSAO: $SESSAO concluída em $(date)" >> $WORKDIR/sessions.txt

echo "$(date) - Efetuados backup de $COUNT conta(s)" >> $LOGFILE

exit 0
}

backup_todas_contas ()
{
LISTATODASCONTAS=$(mktemp)
$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(objectclass=zimbraAccount)" zimbraMailDeliveryAddress zimbraMailHost | grep ^zimbraMail | awk '{print $2}' > "$LISTATODASCONTAS"
SESSAO="full-"$(date  +%Y%m%d%H%M%S)
echo "SESSAO: $SESSAO iniciada em $(date)" >> $WORKDIR/sessions.txt
TEMPDIR=$(mktemp -d $WORKDIR/XXXX)
for MAIL in $(grep @ $LISTATODASCONTAS); do 
	MAILHOST=$(grep -A1 ^$MAIL $LISTATODASCONTAS| grep -v @)
	$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(zimbraMailDeliveryAddress=$MAIL)" > $TEMPDIR/$MAIL.ldiff
	$(which curl) -k -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz > $TEMPDIR/$MAIL.tgz
	echo $SESSAO:$MAIL:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt
done
mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
echo "SESSAO: $SESSAO concluída em $(date)" >> $WORKDIR/sessions.txt
exit 0
}

incremental_todas_contas ()
{
FULLSESSIONLABEL=$(grep "SESSAO: full-" $WORKDIR/sessions.txt | tail -1 | awk '{print $2}')
if ! [ -z "$FULLSESSIONLABEL" ]; then
        if ! [ -d "$WORKDIR/$FULLSESSIONLABEL" ]; then
                echo "O diretório $WORKDIR/$FULLSESSIONLABEL não existe. Impossível prosseguir."
                exit 0
        fi
else
	echo "Nenhum backup completo encontrado. Impossível prosseguir."
	exit 0
fi
INCFROM=$(grep INCFROM: $WORKDIR/sessions.txt | tail -1 | awk '{print $2}')
LISTATODASCONTAS=$(mktemp)
$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(objectclass=zimbraAccount)" zimbraMailDeliveryAddress zimbraMailHost | grep ^zimbraMail | awk '{print $2}' > "$LISTATODASCONTAS"
SESSAO="inc"-$(date  +%Y%m%d%H%M%S)
echo "SESSAO: $SESSAO iniciada em $(date)" >> $WORKDIR/sessions.txt
TEMPDIR=$(mktemp -d $WORKDIR/XXXX)
for MAIL in $(grep @ $LISTATODASCONTAS); do 
	EXISTEFULL=""
	EXISTEFULL=$(grep $MAIL $WORKDIR/sessions.txt | grep ^full)
        if [ -z "$EXISTEFULL" ]; then
        	echo " $MAIL não tinha backup full anterior. Executando agora..."
                backup_contas $MAIL
        else
		INCFROM=$(grep $MAIL $WORKDIR/sessions.txt | grep -v ^WARN | tail -1 | awk -F: '{print $3}')
		if [ "$INCFROM" = "$(date +%m/%d/%y)" ]; then
			echo "WARN: $MAIL já foi becapeada hoje. Nada a fazer." | tee -a $WORKDIR/sessions.txt
		else
			MAILHOST=$(grep -A1 ^$MAIL $LISTATODASCONTAS| grep -v @)
			$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(zimbraMailDeliveryAddress=$MAIL)" > $TEMPDIR/$MAIL.ldiff
			$(which curl) -k -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz\&query=after:\"$INCFROM\" > $TEMPDIR/$MAIL.tgz
# "
			echo $SESSAO:$MAIL:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt
		fi
	fi
done
mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
echo "SESSAO: $SESSAO concluída em $(date)" >> $WORKDIR/sessions.txt
exit 0
}

backup_contas ()
{
	SUBSESSAO="$SESSAO"
	SUBTEMP=$TEMPDIR
	SESSAO="full-"$(date  +%Y%m%d%H%M%S)
	echo "SESSAO: $SESSAO iniciada em $(date)" >> $WORKDIR/sessions.txt
	TEMPDIR=$(mktemp -d $WORKDIR/XXXX)
K=1
while true; do
	MAIL=$(echo $1, | cut -d, -f$K)
	if [ -z $MAIL ]; then
		break
	fi
	$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(zimbraMailDeliveryAddress=$MAIL)" > $TEMPDIR/$MAIL.ldiff
	MAILHOST=$(grep ^zimbraMailHost $TEMPDIR/$MAIL.ldiff | awk '{print $2}')
	$(which curl) -k -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz > $TEMPDIR/$MAIL.tgz
	echo $SESSAO:$MAIL:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt
	((K = K+1))
	unset MAIL
	sleep 1
done
#if [ -z "$SUBSESSAO" ]; then
#	mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
#	echo "SESSAO: $SESSAO concluída em $(date)" >> $WORKDIR/sessions.txt
#	exit 0
#else
#	SESSAO="$SUBSESSAO"
#fi
	mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
	echo "SESSAO: $SESSAO concluída em $(date)" >> $WORKDIR/sessions.txt
	SESSAO="$SUBSESSAO"
	TEMPDIR="$SUBTEMP"
}

incremental_contas ()
{
SESSAO="inc-"$(date  +%Y%m%d%H%M%S)
echo "SESSAO: $SESSAO iniciada em $(date)" >> $WORKDIR/sessions.txt
TEMPDIR=$(mktemp -d $WORKDIR/XXXX)
K=1
while true; do
	MAIL=$(echo $1, | cut -d, -f$K)
	if [ -z $MAIL ]; then
		break
	else
		EXISTEFULL=""
		EXISTEFULL=$(grep $MAIL $WORKDIR/sessions.txt | grep ^full)
		if [ -z "$EXISTEFULL" ]; then
			echo " $MAIL não tinha backup full anterior. Executando agora..."
			backup_contas $MAIL
			((K = K+1))
		else
			$(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(zimbraMailDeliveryAddress=$MAIL)" > $TEMPDIR/$MAIL.ldiff
			INCFROM=$(grep $MAIL $WORKDIR/sessions.txt | grep -v ^WARN | tail -1 | awk -F: '{print $3}')
			if [ "$INCFROM" = "$(date +%m/%d/%y)" ]; then
				echo "WARN:  $MAIL já foi becapeada hoje. Nada a fazer." | tee -a $WORKDIR/sessions.txt
				((K = K+1))
			else
				MAILHOST=$(grep ^zimbraMailHost $TEMPDIR/$MAIL.ldiff | awk '{print $2}')
				$(which curl) -k -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz\&query=after:\"$INCFROM\" > $TEMPDIR/$MAIL.tgz
# "
				echo $SESSAO:$MAIL:$(date +%m/%d/%y) >> $WORKDIR/sessions.txt
				((K = K+1))
			fi
		fi
	fi
	unset MAIL
done
mv "$TEMPDIR" "$WORKDIR/$SESSAO" && rm -rf "$TEMPDIR"
echo "SESSAO: $SESSAO concluída em $(date)" >> $WORKDIR/sessions.txt
exit 0
}

lista_sessoes ()
{
grep SESSAO: $WORKDIR/sessions.txt| grep iniciada | awk '{print $2}'
exit 0
}

restaura_contas ()
{
BKPSCONTA=$(mktemp)
K=1
while true; do
        MAIL=$(echo $1, | cut -d, -f$K)
        if [ -z $MAIL ]; then
                break
        fi
	grep $MAIL $WORKDIR/sessions.txt | grep -v ^WARN: > $BKPSCONTA
	if ! [ -s $BKPSCONTA ]; then
		echo "$MAIL: Nenhum backup encontrado. Impossível restaurar"
		((K = K+1))
	else
		if [ -z $2 ]; then
		echo "Nao implementada."
		# Restauração completa
		((K = K+1))
		else
			SESSAOCONTA=$(grep $2 $WORKDIR/sessions.txt | tail -1 | awk '{print $2}')
			if [ -z $SESSAOCONTA ]; then
				echo "$MAIL: A sessão $2 não existe. Impossível continuar..."
				break
			else
				CONTANASESSAO=$(grep $MAIL $BKPSCONTA | grep $SESSAOCONTA)
				if [ -z $CONTANASESSAO ]; then
					echo "$MAIL não foi encontrada na sessão $SESSAOCONTA. Impossível restaurar."
        				((K = K+1))
				else
					MAILHOST=$(grep ^zimbraMailHost $WORKDIR/$SESSAOCONTA/$MAIL.ldiff | awk '{print $2}')
        				$(which curl) -k --data-binary @$WORKDIR/$SESSAOCONTA/$MAIL.tgz -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz
        				((K = K+1))
				        unset MAIL
				fi
			fi
		fi
	fi
done
exit 0
}
restaura_LDAP_conteudo ()
{
BKPSCONTA=$(mktemp)
K=1
while true; do
        MAIL=$(echo $1, | cut -d, -f$K)
        if [ -z $MAIL ]; then
                break
	fi
	if [ -z $2 ]; then
		EXISTE=$($(which ldapsearch) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -w $LDAPZIMBRAPASS -b '' -LLL "(&(objectclass=zimbraAccount)(zimbraMailDeliveryAddress=$MAIL))" uid)
		if ! [ -z "$EXISTE" ]; then
			echo "A conta $MAIL existe. Utilize zmbkpose -r $MAIL nome_da_sessao."
			((K = K+1))
		else
		       	grep $MAIL $WORKDIR/sessions.txt | grep -e ^inc- -e ^full- > $BKPSCONTA
		        if ! [ -s $BKPSCONTA ]; then
        		        echo "$MAIL: Nenhum backup encontrado. Impossível restaurar"
                		((K = K+1))
		        else
				echo "Sessões encontradas
$(cat $BKPSCONTA | awk -F: '{print $1}')"
				for SESSAOCONTA in $(cat $BKPSCONTA | awk -F: '{print $1}'); do
					echo "Restaurando a partir de $SESSAOCONTA"
		                	MAILHOST=$(grep ^zimbraMailHost $WORKDIR/$SESSAOCONTA/$MAIL.ldiff | awk '{print $2}')
					$(which ldapdelete) -r -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -c -w $LDAPZIMBRAPASS $(grep ^dn: $WORKDIR/$SESSAOCONTA/$MAIL.ldiff | awk '{print $2}') 2>/dev/null
					$(which ldapadd) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -c -w $LDAPZIMBRAPASS -f $WORKDIR/$SESSAOCONTA/$MAIL.ldiff
        	        	        $(which curl) -k --data-binary @$WORKDIR/$SESSAOCONTA/$MAIL.tgz -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz
					echo "$MAIL restaurado a partir de $SESSAOCONTA"
				done
	        	        ((K = K+1))
        	        	unset MAIL
			fi
		fi
	else
		SESSAOCONTA=$(grep $2 $WORKDIR/sessions.txt | grep $MAIL | tail -1 | awk -F: '{print $1}')
	        if [ -z $SESSAOCONTA ]; then
                	echo "$MAIL: A sessão $2 não existe ou a conta não está presente. Impossível restaurar..."
        	        ((K = K+1))
                else
			USERDN=$(grep ^dn: $WORKDIR/$SESSAOCONTA/$MAIL.ldiff | awk '{print $2}')
			$(which ldapdelete) -r -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -c -w $LDAPZIMBRAPASS $USERDN
			$(which ldapadd) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -c -w $LDAPZIMBRAPASS -f $WORKDIR/$SESSAOCONTA/$MAIL.ldiff
			echo "Perfil e configurações do usuário restaurados para $SESSAOCONTA"
        	        ((K = K+1))
       	        	unset MAIL
		fi
        fi
done
exit 0
}

DeusMeAjude ()
{
for BKP in $(grep -e ^full- -e ^inc- $WORKDIR/sessions.txt); do
	SESSAOCONTA=$(echo $BKP | awk -F: '{print $1}')
	MAIL=$(echo $BKP | awk -F: '{print $2}')
	USERDN=$(grep ^dn: $WORKDIR/$SESSAOCONTA/$MAIL.ldiff | awk '{print $2}')
	MAILHOST=$(grep ^zimbraMailHost $WORKDIR/$SESSAOCONTA/$MAIL.ldiff | awk '{print $2}')
	echo "Restaurando $MAIL"
	$(which ldapdelete) -r -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -c -w $LDAPZIMBRAPASS $USERDN 2>/dev/null
	$(which ldapadd) -x -H $LDAPMASTERSERVER -D $LDAPZIMBRADN -c -w $LDAPZIMBRAPASS -f $WORKDIR/$SESSAOCONTA/$MAIL.ldiff
	$(which curl) -k --data-binary @$WORKDIR/$SESSAOCONTA/$MAIL.tgz -u $ADMINUSER:$ADMINPASS https://$MAILHOST:7071/home/$MAIL/?fmt=tgz
	echo "$MAIL restaurado"
done
exit 0
}

rotate_backup ()
{

cp $WORKDIR/sessions.txt $WORKDIR/sessions.txt.old

grep SESS $WORKDIR/sessions.txt | awk '{print $2}'| while read line; do
	if [ "$(echo ${line} | cut -d- -f2)" -lt "$1" ]; then
	   [ -d $WORKDIR/"${line}" ] && rm -rf $WORKDIR/"${line}" && echo Excluída sessão "${line}"
	   grep -v "${line}" $WORKDIR/sessions.txt > $WORKDIR/.sessions.txt
	   mv $WORKDIR/.sessions.txt $WORKDIR/sessions.txt
	fi
done

rm $WORKDIR/.sessions.txt -f
exit 0
}


# Carregar e criticar o arquivo de configuração
source /etc/zmbkpose/zmbkpose.conf

if ! [ -z "$BACKUPUSER" ]; then
	if [ "$(id -u)" != "$(id -u $BACKUPUSER)" ]; then
		echo "É preciso ser $BACKUPUSER para executar este script"
		exit 0
	fi
else
	echo "Você precisa definir a variável BACKUPUSER"
	exit 0
fi

if ! [ -z "$WORKDIR" ]; then
        if ! [ -d "$WORKDIR" ]; then
                echo "O diretório $WORKDIR não existe"
                exit 0
        fi
else
        echo "Você precisa definir a variável WORKDIR"
        exit 0
fi

if [ -z "$ADMINUSER" ]; then
        echo "Você precisa definir a variável ADMINUSER"
        exit 0
fi

if [ -z "$ADMINPASS" ]; then
        echo "Você precisa definir a variável ADMINPASS"
        exit 0
fi

if [ -z "$LDAPMASTERSERVER" ]; then
        echo "Você precisa definir a variável LDAPMASTERSERVER"
        exit 0
fi

if [ -z "$LDAPZIMBRADN" ]; then
        echo "Você precisa definir a variável LDAPZIMBRADN"
        exit 0
fi

if [ -z "$LDAPZIMBRAPASS" ]; then
        echo "Você precisa definir a variável LDAPZIMBRAPASS"
        exit 0
fi

if [ -z "$LOGFILE" ]; then
        echo "Você precisa definir a variável LOGFILE"
        exit 0
fi

# Criticar os parametros passados na linha de comando

case "$1" in
"-f" )
	if [ $PARALLEL_SUPPORT -eq 1  ];then
			echo "Executando backup Paralelo"
			backup_todas_contas_parallel
		else
			if [ -z "$2" ]; then
				backup_todas_contas
			else
				if [ -z "$3" ]; then
					backup_contas $2
				fi
				echo "Parâmetros $@ incorretos. Reveja o help."
       		 		exibe_help
		fi
	fi
;;
"-i" )
	if [ -z "$2" ]; then
		incremental_todas_contas
	else
		if [ -z "$3" ]; then
			incremental_contas $2
		fi
		echo "Parâmetros $@ incorretos. Reveja o help."
        	exibe_help
	fi
;;
"-l" )
        if [ -z "$2" ]; then
                lista_sessoes
	else
                echo "Parâmetros $@ incorretos. Reveja o help."
                exibe_help
	fi
;;
"-r" )
        if [ -z "$2" ]; then
                echo "Parâmetros $@ incorretos. Reveja o help."
                exibe_help
	else
		if [ -z "$4" ]; then
			restaura_contas $2 $3
		else
                	echo "Parâmetros $@ incorretos. Reveja o help."
	                exibe_help
		fi
	fi
;;
"-restoreAccount" )
        if [ -z "$2" ]; then
                echo "Parâmetros $@ incorretos. Reveja o help."
                exibe_help
	else
		if [ -z "$3" ]; then
			restaura_LDAP_conteudo $2
		else
			if [ "$3" = "--LDAPOnly" ]; then
				restaura_LDAP_conteudo $2 $4
			else
	                	echo "Parâmetros $@ incorretos. Reveja o help."
		                exibe_help
			fi
		fi
	fi
	
;;
"--DeusMeAjude" )
	if ! [ -z "$2" ]; then
	        echo "Parâmetros $@ incorretos. Reveja o help."
        	exibe_help
	else
		DeusMeAjude
	fi
;;
"-d" )
	if [ -z "$2" ]; then
	        echo "O parametro -d aceita apenas um número de dias, ou um número seguido dos complementos weeks para semanas ou months para meses"
		exibe_help
		exit 0
	fi
	if [ $2 -eq $2 2> /dev/null ]; then
		if [ -z "$3" ]; then
		  OLDEST=`date  +%Y%m%d%H%M%S -d "-$2 days"`
		else
			case "$3" in
			"weeks" )
			  OLDEST=`date  +%Y%m%d%H%M%S -d "-$2 weeks"`
			;;
			"months" )
			  OLDEST=`date  +%Y%m%d%H%M%S -d "-$2 months"`
			;;
			* )
		          echo "O parametro -d aceita apenas um número de dias, ou um número seguido dos complementos weeks para semanas ou months para meses"
         		  exibe_help
			  exit 0
			;;
			esac
		fi
		rotate_backup $OLDEST
	else
	        echo "O parametro -d aceita apenas um número de dias, ou um número seguido dos complementos weeks para semanas ou months para meses"
		exibe_help
		exit 0
	fi
;;

* )
	echo "Parâmetros $@ incorretos. Reveja o help."
	exibe_help
;;
esac
exit 0

# Ações do script

# Listar opções de Uso

# Listar sessoes de backups armazenados

# Backup FULL de todas as contas

# Backup FULL de uma ou mais contas especificadas na linha de comando

# Restore do conteudo de uma ou mais contas especificadas na linha de comando

# Restore FULL (atributos e conteudo) de uma ou mais contas especificadas na linha de comando

# Restore FULL de todas as contas (PEDIR CONFIRMAÇÕES. ALTÍSSIMO RISCO.)

# Exclui a sessao especificada na linha de comandos (para administração da janela de retencao)
